{"version":3,"sources":["Exam.js","App.js","serviceWorker.js","index.js"],"names":["links","match","class","params","id","documentation","posts","map","title","description","intro","guide","ref","Card","Body","Title","Text","to","url","path","component","Exam","style","width","margin","exact","from","Component","App","className","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8qCAWA,SAASA,EAAT,GAA0B,IAATC,EAAQ,EAARA,MAEf,OACE,yBAAKC,MAAM,yBACT,4BAAKD,EAAME,OAAOC,KAIxB,SAASC,EAAT,GAAoC,IAAVJ,EAAS,EAATA,MACxB,OACE,yBAAKC,MAAM,OACLI,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,MAAWC,GAAd,EAAUL,GAAV,EAAcK,aAAaC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,IAAzC,OACd,yBAAKV,MAAM,YACD,kBAACW,EAAA,EAAD,KACA,kBAACA,EAAA,EAAKC,KAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,KAAaP,GACb,kBAACK,EAAA,EAAKG,KAAN,KACKP,GAEL,6BACI,6BACI,kBAAC,IAAD,CAAMQ,GAAE,UAAKhB,EAAMiB,IAAX,0BAAgCR,IAAUA,IAClD,iCAAM,kBAAC,IAAD,CAAMO,GAAE,UAAKhB,EAAMiB,IAAX,0BAAgCP,IAAUA,IACxD,iCAAM,kBAAC,IAAD,CAAMM,GAAE,UAAKhB,EAAMiB,IAAX,0BAAgCN,IAAQA,WAO5E,kBAAC,IAAD,CAAOO,KAAI,UAAKlB,EAAMkB,KAAX,sBAAqCC,UAAWpB,K,IAgBlDqB,E,iLAVX,OACE,kBAAC,IAAD,KACE,yBAAKC,MAAO,CAACC,MAAO,IAAMC,OAAQ,WAChC,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIT,GAAG,6BAC5B,kBAAC,IAAD,CAAOE,KAAK,2BAA2BC,UAAWf,U,GANzCsB,aC9BJC,E,iLART,OACI,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJMF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShC,MACvB,2DCZNiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.68826558.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport posts from './data/posts.json';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Link,\r\n} from 'react-router-dom'\r\n\r\nfunction links ({match}) {\r\n  // let arr = posts.find( data  => data.id === match.params.id)\r\n  return (\r\n    <div class=\"col-sm-12 api-details\">       \r\n      <h5>{match.params.id}</h5>\r\n    </div>\r\n  )\r\n}\r\nfunction documentation ({ match }) {\r\n  return (\r\n    <div class=\"row\">\r\n         {posts.map(({ title, id, description, intro, guide, ref }) => (\r\n      <div class=\"col-sm-4\">\r\n                <Card>\r\n                <Card.Body>\r\n                    <Card.Title>{title}</Card.Title>\r\n                    <Card.Text>\r\n                        {description}\r\n                    </Card.Text>\r\n                    <div>\r\n                        <div>\r\n                            <Link to={`${match.url}/en/api/dummy1/${intro}`}>{intro}</Link></div>\r\n                            <div> <Link to={`${match.url}/en/api/dummy1/${guide}`}>{guide}</Link></div>\r\n                            <div> <Link to={`${match.url}/en/api/dummy1/${ref}`}>{ref}</Link>\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n                </Card>    \r\n        </div>        \r\n        ))}        \r\n      <Route path={`${match.path}/en/api/dummy1/:id`} component={links} />\r\n    </div>\r\n  )\r\n}\r\nclass Exam extends Component {\r\n  render() {      \r\n    return (\r\n      <Router>\r\n        <div style={{width: 1000, margin: '0 auto'}}>\r\n          <Redirect exact from=\"/\" to=\"/developer/documentation\" />\r\n          <Route path='/developer/documentation' component={documentation} />\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\nexport default Exam","\nimport React, {Component} from 'react';\nimport './App.css';\nimport Exam from './Exam';\n\nclass App extends Component {\n  render() {\n      return (\n          <div className=\"App\">\n            <Exam></Exam>\n          </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}